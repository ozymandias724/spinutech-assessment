// Override Bootstrap's Sass default variables
//
// Nearly all variables in Bootstrap are written with the `!default` flag.
// This allows you to override the default values of those variables before
// you import Bootstrap's source Sass files.
//
// Overriding the default variable values is the best way to customize your
// CSS without writing _new_ styles. For example, you can either change
// `$body-color` or write more CSS that override's Bootstrap's CSS like so:
// `body { color: red; }`.


//
// Bring in Bootstrap
//

// Option 1
//
// Import all of Bootstrap's CSS

// @import "bootstrap/scss/bootstrap";

// Option 2
//
// Place variable overrides first, then import just the styles you need. Note that some stylesheets are required no matter what.

// Toggle global options
$enable-gradients: true;
$enable-shadows: true;

$offcanvas-box-shadow: 0 1rem 3rem rgba(0, 0, 0, .175);

// Include functions first
@import "bootstrap/scss/functions";

// Customize some defaults
$body-color: #333;
$body-bg: #fff;
$border-radius: .4rem;
$success: #7952b3;

// Required
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";
@import "bootstrap/scss/root";
@import "bootstrap/scss/reboot";

@import "bootstrap/scss/type";
// @import "bootstrap/scss/images";
@import "bootstrap/scss/containers";
@import "bootstrap/scss/grid";
// @import "bootstrap/scss/tables";
// @import "bootstrap/scss/forms";
@import "bootstrap/scss/buttons";
@import "bootstrap/scss/transitions";
@import "bootstrap/scss/dropdown";
// @import "bootstrap/scss/button-group";
// @import "bootstrap/scss/nav";
// @import "bootstrap/scss/navbar"; // Requires nav
// @import "bootstrap/scss/card";
// @import "bootstrap/scss/breadcrumb";
// @import "bootstrap/scss/accordion";
// @import "bootstrap/scss/pagination";
// @import "bootstrap/scss/badge";
// @import "bootstrap/scss/alert";
// @import "bootstrap/scss/progress";
// @import "bootstrap/scss/list-group";
// @import "bootstrap/scss/close";
// @import "bootstrap/scss/toasts";
// @import "bootstrap/scss/modal"; // Requires transitions
// @import "bootstrap/scss/tooltip";
// @import "bootstrap/scss/popover";
// @import "bootstrap/scss/carousel";
// @import "bootstrap/scss/spinners";
// @import "bootstrap/scss/offcanvas"; // Requires transitions
// @import "bootstrap/scss/placeholders";

// Helpers
// @import "bootstrap/scss/helpers";

// Utilities
@import "bootstrap/scss/utilities/api";


//
// Custom styles
//

@import "icon-list";

body {
  padding: 1.5rem;
}
// 
// 
// 
// 
// creating this sass map of color names and values
// bootstrap isn't entirely available as SASS here for utilities,
// this could scale or slot into something more robust easily
$palette: (
	"red": #dc3545,
	"green": #198754,
	"blue": #0d6efd,
	"orange": #fd7e14,
	"yellow": #ffc107
);

// global styling - see normalize enqueued
body {
	font-family: 'Open Sans', sans-serif;
}

// utility-focused approach keeps each layer simple despite overall complexity
.square-container {
	position: relative;
	padding-bottom: 100%;
	.square-content {
		position: absolute;
		width: 100%;
		height: 100%;
	}
}

// here is our initial row, of all circles
#row-of-circles {
	.square-container {
		border-radius: 50%;
		overflow: hidden;
	}
}
#row-of-squares {
	.col {
		display: flex;
		flex-direction: column-reverse;
	}
}

// scoping in a known container until review
#spinu--container {
	margin: 200px auto;
	@each $color, $value in $palette {
		.bg-#{$color} {
			background-color: $value;
		}
	}
	.column {
		max-width: 180px;
	}
	.button {
		cursor: pointer;
		transition: all 0.3s ease;
		+ p {
			margin: 0;
			opacity: 0;
			transition: all 0.3s ease;
		}
		&:hover {
			+ p {
				opacity: 1;
			}
		}
	}
}

// wordpress tends to use 600 and 780 for its own breakpoints
@media screen and (min-width: 768px) {
	body {
		background-color: black;
		color: white;
	}
}